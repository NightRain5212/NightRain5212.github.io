<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CS61b:Week2</title>
      <link href="/2024/10/20/Week2-SLList/"/>
      <url>/2024/10/20/Week2-SLList/</url>
      
        <content type="html"><![CDATA[<h2 id="Java下的赋值法则"><a href="#Java下的赋值法则" class="headerlink" title="Java下的赋值法则"></a>Java下的赋值法则</h2><ul><li>Java的基本数据类型<ul><li>基本类型：<ul><li><code>int,double,boolean,char,bytes,short,long,float</code></li></ul></li><li>其他类型：非基本类型（如数组，用户自定义类等等）</li></ul></li><li>等号赋值规则<ul><li>一般赋值：值传递（仅仅将变量名实际储存的内存中的内容复制一份）</li><li>new关键字：（其他类型的创建）引用传递。（实际储存的是在内存开辟的新的类型的地址）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//a与b指向同一个对象  </span><br><span class="hljs-comment">// a 实际上储存的是新建对象的地址  </span><br><span class="hljs-type">Walrus</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Walrus</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">8.3</span>);  <br>Walrus b;  <br><span class="hljs-comment">//将a储存的地址赋给b，所以a与b指向同一个对象。  </span><br>b = a;  <br>b.weight = <span class="hljs-number">5</span>;  <br>System.out.println(a.weight);  <br><span class="hljs-comment">// 5</span><br><br><span class="hljs-comment">//x 与 y 是不同的整数    </span><br><span class="hljs-comment">//传入参数时的情况也有所不同。  </span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;  <br><span class="hljs-type">int</span> y;  <br>y = x;  <br>y = <span class="hljs-number">3</span>;  <br>System.out.println(x);  <br><span class="hljs-comment">// 50 </span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="SLList的实现"><a href="#SLList的实现" class="headerlink" title="SLList的实现"></a>SLList的实现</h2><h3 id="“裸SLList”数据结构（节点）"><a href="#“裸SLList”数据结构（节点）" class="headerlink" title="“裸SLList”数据结构（节点）"></a>“裸SLList”数据结构（节点）</h3><ul><li>SLList: Singly Linked List (单向链表)</li><li>一个类型中含有以下封装：<ul><li>储存的数据</li><li>下一个节点的地址（引用）</li><li>添加值（首，尾，中）</li><li>返回数组大小</li><li>等等</li></ul></li><li>节点Node组成：<ul><li>该节点包含的元素</li><li>下一个节点的地址</li></ul></li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s2.loli.net/2024/10/20/DpwBkCxNVyehn1t.png" alt="链表结构"></div><span class="image-caption">链表结构</span></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//简单链表的实现  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Intlist</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> first;  <br>    <span class="hljs-comment">//实际上储存的是引用  </span><br>    <span class="hljs-keyword">public</span> Intlist rest;  <br>  <br>    <span class="hljs-comment">//构造函数  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Intlist</span><span class="hljs-params">(<span class="hljs-type">int</span> f,Intlist r)</span>&#123;  <br>        <span class="hljs-built_in">this</span>.first = f;  <br>        <span class="hljs-built_in">this</span>.rest = r;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">//递归计算数组大小  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>  <br>    &#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.rest == <span class="hljs-literal">null</span>)&#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <br>        &#125;  <br>        <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>+<span class="hljs-built_in">this</span>.rest.size();  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-comment">//迭代法求长度  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">iterativesize</span><span class="hljs-params">()</span>&#123;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br>        <span class="hljs-comment">// p 是指向自己的指针  </span><br>        <span class="hljs-type">Intlist</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;  <br>        <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>)&#123;  <br>            p = p.rest;  <br>            i+=<span class="hljs-number">1</span>;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> i;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">//递归法访问元素  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;  <br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>)&#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.first;  <br>        &#125;  <br>        <span class="hljs-keyword">else</span>&#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.rest.get(i-<span class="hljs-number">1</span>);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123; <br>      <span class="hljs-comment">// 原始构建方法（十分冗杂） </span><br><span class="hljs-comment">//        Intlist L = new Intlist();  </span><br><span class="hljs-comment">//        L.first = 3;  </span><br>      <span class="hljs-comment">//  L.rest = new Intlist();  </span><br><span class="hljs-comment">//        L.rest.first = 4;  </span><br><span class="hljs-comment">//        L.rest.rest = null;  </span><br>        <span class="hljs-comment">// [3 , rest] rest -&gt; [4,rest] rest -&gt; null        </span><br>        <span class="hljs-comment">// Intlist L = new Intlist(10,null);  </span><br>        <span class="hljs-comment">//在列表的前面构建列表  </span><br>        L = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intlist</span>(<span class="hljs-number">20</span>,L);  <br>        L = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intlist</span>(<span class="hljs-number">30</span>,L);  <br><span class="hljs-comment">//        System.out.println(L.size());  </span><br>        System.out.println(L.iterativesize());  <br>        System.out.println(L.get(<span class="hljs-number">2</span>));  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="封装后的SSList"><a href="#封装后的SSList" class="headerlink" title="封装后的SSList"></a>封装后的SSList</h3><ul><li>封装（数据抽象）：只考虑接口函数的使用，不考虑其具体实现。</li><li>将链表的每一个结点封装在链表类中。</li><li>第零节点（哨兵节点的使用）：避免了空列表的引入是代码变得冗杂的问题。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//单向链表实现  </span><br><span class="hljs-comment">//数据抽象的体现，只需了解接口，无需理解运作细节  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SSList</span> &#123;  <br>  <span class="hljs-comment">// private 防止类外对类内元素的访问，以进行一定程度的保护  </span><br>  <span class="hljs-comment">// 嵌套类，链表节点  </span><br>  <span class="hljs-comment">// 嵌套静态类型，意味着内部类型的实例变量不能访问外部类的元素  </span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Intnode</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> item;  <br>    <span class="hljs-keyword">public</span> Intnode next;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Intnode</span><span class="hljs-params">(<span class="hljs-type">int</span> i, Intnode n)</span> &#123;  <br>      item = i;  <br>      next = n;  <br>    &#125;  <br>  &#125;  <br>  <br><span class="hljs-comment">//  private Intnode first;  </span><br>  <br>  <span class="hljs-comment">// getfirst  </span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getfirst</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-keyword">return</span> sentinel.next.item;  <br>  &#125;  <br>  <br>  <span class="hljs-comment">// addfirst  </span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addfirst</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;  <br>    <span class="hljs-built_in">this</span>.sentinel.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intnode</span>(a, sentinel.next);  <br>    sentinel.item += <span class="hljs-number">1</span>;  <br>  &#125;  <br>  <br>  <span class="hljs-comment">// addlast  </span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addlast</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;  <br>    <span class="hljs-type">Intnode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.sentinel.next;  <br>    <span class="hljs-keyword">while</span> (p.next != <span class="hljs-literal">null</span>) &#123;  <br>      p = p.next;  <br>    &#125;  <br>    p.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intnode</span>(a, <span class="hljs-literal">null</span>);  <br>    sentinel.item += <span class="hljs-number">1</span>;  <br>  &#125;  <br>  <br>  <span class="hljs-comment">// size(可以分为两部分：外部接口和内部实现)  </span><br>  <span class="hljs-comment">// private int size(Intnode i) &#123;  </span><br>  <span class="hljs-comment">// if (i.next == null) &#123;  </span><br>  <span class="hljs-comment">// return 1;  </span><br>  <span class="hljs-comment">// &#125; else &#123;  </span><br>  <span class="hljs-comment">// return 1 + size(i.next);  </span><br>  <span class="hljs-comment">// &#125;  </span><br>  <span class="hljs-comment">// &#125;  </span><br>  <br>  <span class="hljs-comment">// public int size() &#123;  </span><br>  <span class="hljs-comment">// return size(first);  </span><br>  <span class="hljs-comment">// &#125;  </span><br>  <br>  <span class="hljs-comment">// size的改善，引入计数变量  </span><br>  <span class="hljs-comment">// private int size = 0;  </span><br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.sentinel.item;  <br>  &#125;  <br>  <br>  <span class="hljs-comment">// 创建空列表  </span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">SSList</span><span class="hljs-params">()</span> &#123;  <br>    sentinel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intnode</span>(<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>);  <br>  &#125;  <br>  <br>  <span class="hljs-comment">// 解决引入空列表的方法--引入零节点（哨兵节点）  </span><br>  <span class="hljs-comment">//第一个节点位于哨兵结点之后  </span><br>  <span class="hljs-comment">//哨兵节点的值存放元素个数  </span><br>  <span class="hljs-keyword">private</span> Intnode sentinel ;  <br>  <br>  <span class="hljs-comment">// main method test  </span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>    <span class="hljs-type">SSList</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SSList</span>();  <br>    l.addfirst(<span class="hljs-number">1</span>);  <br>    l.addlast(<span class="hljs-number">2</span>);  <br>    <span class="hljs-type">int</span> <span class="hljs-variable">sizel</span> <span class="hljs-operator">=</span> l.size();  <br>    System.out.println(<span class="hljs-string">&quot;size:&quot;</span> + sizel);  <br>    System.out.println(<span class="hljs-string">&quot;firstitem:&quot;</span> + l.getfirst());  <br>  &#125;  <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="链表数据结构的特点"><a href="#链表数据结构的特点" class="headerlink" title="链表数据结构的特点"></a>链表数据结构的特点</h3><ul><li>节点分散在各自不同的内存空间中</li><li>节点不需要连续地存储在一块地方，增加和删除节点非常方便</li><li>访问元素只能通过一个节点一个节点遍历，效率低</li></ul><h2 id="Proj0通关！"><a href="#Proj0通关！" class="headerlink" title="Proj0通关！"></a>Proj0通关！</h2><ul><li>cs61b著名的2048proj通过啦，感觉全英文理解题意就花了好久。</li><li>预估完成时间：5h左右</li><li>附仓库:<a href="https://github.com/NightRain5212/cs61b-sp21/tree/main/proj0">https://github.com/NightRain5212/cs61b-sp21/tree/main/proj0</a></li></ul><h2 id="Lab2通关！"><a href="#Lab2通关！" class="headerlink" title="Lab2通关！"></a>Lab2通关！</h2><ul><li>居然还有万恶的Hidden test,第一次真是没看到。</li><li>附仓库:<a href="https://github.com/NightRain5212/cs61b-sp21/tree/main/lab2">https://github.com/NightRain5212/cs61b-sp21/tree/main/lab2</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> study </tag>
            
            <tag> 编程语言 </tag>
            
            <tag> java </tag>
            
            <tag> cs61b </tag>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS61b:Week1</title>
      <link href="/2024/10/15/Week1-Java%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/10/15/Week1-Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Hello-world的实现"><a href="#Hello-world的实现" class="headerlink" title="Hello,world的实现"></a>Hello,world的实现</h2><ul><li>在文件<code>helloworld.java</code>中实现输出hello,world<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Helloworld</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello,world&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>py中的实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello,world&quot;</span>)<br></code></pre></td></tr></table></figure></li><li>cpp中的实现<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;hello,world&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><div class="note info modern"><p>Tips<br>Java是面向对象的语言，所有的代码都要包含在一个类中。<br>Java与C语言类似，语句结束都要以分号结尾。<br>我们需要运行的函数都要放在主方法中运行。<br>主方法为<code>public static void main(String[] args){}</code></p></div><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul><li>Java的基础语法与C类似，使用变量前要<strong>先声明变量类型，变量名</strong>。</li><li>Java与C类似，是<strong>静态编译语言</strong>，这意味着我们不能将变量匹配到错误的数据类型，变量类型一旦声明就<strong>无法更改</strong>。</li><li>在Java运行代码前，Java会<strong>先检查所有的变量类型是否匹配，再运行程序</strong>，若不匹配则一整个程序都不会运行。</li><li>Java是面向对象的编程语言，<strong>所有代码都要放在一个类中</strong>。</li></ul><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><ul><li>首先，定义函数必须要在一个类中。在Java中，函数也称为方法(method)</li><li><strong>函数的返回值类型，与参数类型都需要声明</strong>与C语言类似。</li><li>Java的函数只返回一个值。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 默认放在一个类型中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a , <span class="hljs-type">int</span> b)</span>&#123;<br><span class="hljs-keyword">if</span>(a&lt;b)&#123;<br><span class="hljs-keyword">return</span> b;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>System.out.println(max(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>));<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><ul><li>语法与C语言类似</li></ul><h2 id="数组的创建"><a href="#数组的创建" class="headerlink" title="数组的创建"></a>数组的创建</h2><ul><li>java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] numbers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>numbers[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>numbers[<span class="hljs-number">1</span>] = <span class="hljs-number">3</span>;<br>numbers[<span class="hljs-number">2</span>] = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span>[] numbers2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>&#125;;<br></code></pre></td></tr></table></figure></li><li>c++<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span>* numbers = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">3</span>];<br>numbers[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>numbers[<span class="hljs-number">1</span>] = <span class="hljs-number">3</span>;<br>numbers[<span class="hljs-number">2</span>] = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">delete</span>[] numbers;<br><span class="hljs-type">int</span>* numbers2 = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">3</span>] &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">delete</span> [] numbers2;<br></code></pre></td></tr></table></figure></li></ul><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><ul><li>所有的同一个类的实例<strong>共有</strong>静态变量。</li><li>可以<strong>通过类名访问</strong>。</li><li>静态变量相当于常量。</li></ul><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><ul><li>调用时<strong>使用类名调用</strong>，不能通过类的实例调用。</li><li>而非静态方法则只能通过类的示例调用，不能通过类名来调用。</li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> weightinpounds;  <br>    <span class="hljs-comment">// 静态变量所有狗共用一个学名</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">binomen</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Canis familiaris&quot;</span>;<br>    <span class="hljs-comment">//构造函数  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(<span class="hljs-type">int</span> w)</span>&#123;  <br>        <span class="hljs-built_in">this</span>.weightinpounds = w;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeNoise</span><span class="hljs-params">()</span>&#123;  <br>        <span class="hljs-keyword">if</span>(weightinpounds &lt;<span class="hljs-number">10</span>)&#123;  <br>            System.out.println(<span class="hljs-string">&quot;yipyipyip!&quot;</span>);  <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weightinpounds &lt; <span class="hljs-number">30</span>)&#123;  <br>            System.out.println(<span class="hljs-string">&quot;bark!&quot;</span>);  <br>        &#125;<span class="hljs-keyword">else</span> &#123;  <br>            System.out.println(<span class="hljs-string">&quot;acrooooo!&quot;</span>);  <br>        &#125;  <br>    &#125;<br>    <span class="hljs-comment">// 静态方法  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Dog <span class="hljs-title function_">maxDog</span><span class="hljs-params">(Dog d1,Dog d2)</span>&#123;  <br>        <span class="hljs-keyword">if</span>(d1.weightinpounds &gt; d2.weightinpounds)&#123;  <br>            <span class="hljs-keyword">return</span> d1;  <br>        &#125;<span class="hljs-keyword">else</span>&#123;  <br>            <span class="hljs-keyword">return</span> d2;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-comment">//非静态方法</span><br>    <span class="hljs-keyword">public</span> Dog <span class="hljs-title function_">maxDog</span><span class="hljs-params">(Dog d)</span>&#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.weightinpounds &lt; d.weightinpounds)&#123;  <br>            <span class="hljs-keyword">return</span> d;  <br>        &#125;  <br>        <span class="hljs-keyword">else</span>&#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;  <br>    <span class="hljs-comment">//实例化</span><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">chester</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-number">17</span>);  <br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">yusof</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-number">150</span>);  <br>        <span class="hljs-comment">//静态方法的调用</span><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">larger</span> <span class="hljs-operator">=</span> Dog.maxDog(chester,yusof);  <br>        larger.makeNoise();  <br>        <span class="hljs-comment">//非静态方法的调用</span><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">larger2</span> <span class="hljs-operator">=</span> chester.maxDog(yusof);  <br>        larger2.makeNoise();<br>        <span class="hljs-comment">//静态变量的使用  </span><br>        System.out.println(Dog.binomen);  <br>        System.out.println(chester.binomen);  <br>  <br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Lab1通关"><a href="#Lab1通关" class="headerlink" title="Lab1通关!"></a>Lab1通关!</h2><ul><li>附仓库: <a href="https://github.com/NightRain5212/cs61b-sp21/tree/main/lab1">https://github.com/NightRain5212/cs61b-sp21/tree/main/lab1</a></li><li>由于刚上路，代码总有些不足之处，仅用来记录个人成长历程，请理性参考。</li></ul>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> study </tag>
            
            <tag> 编程语言 </tag>
            
            <tag> java </tag>
            
            <tag> cs61b </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Decimal的简单使用</title>
      <link href="/2024/10/13/Decimal/"/>
      <url>/2024/10/13/Decimal/</url>
      
        <content type="html"><![CDATA[<h1 id="Py高精度浮点数的实现"><a href="#Py高精度浮点数的实现" class="headerlink" title="Py高精度浮点数的实现"></a>Py高精度浮点数的实现</h1><ul><li>转化为整数运算（理论上把浮点数转换成整数运算即可，python的整数是没有精度限制的）</li></ul><div class="note info modern"><p>Tip<br>可以跟C/C++风格的整数区分开（有长度限制）。</p></div><ul><li><p><code>Decimal</code> 模块</p><h1 id="Decimal模块的引入"><a href="#Decimal模块的引入" class="headerlink" title="Decimal模块的引入"></a>Decimal模块的引入</h1></li><li><p>由于<code>python</code>的浮点数<strong>精度是有限的</strong>(17位)，为了更精确的计算浮点数，于是引入了<code>Decimal</code> 模块。</p></li><li>一个 <code>Decimal</code> 对象能够<strong>精确地表示任何数字</strong>，以及能够无条件进位或无条件舍去到任意的精度。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> decimal<br></code></pre></td></tr></table></figure><h1 id="Decimal模块的使用"><a href="#Decimal模块的使用" class="headerlink" title="Decimal模块的使用"></a>Decimal模块的使用</h1><ul><li>首先要先确保导入了本模块，本模块为内置模块，无需pip安装<h2 id="创建Decimal类型变量"><a href="#创建Decimal类型变量" class="headerlink" title="创建Decimal类型变量"></a>创建Decimal类型变量</h2></li></ul><h3 id="变量构造"><a href="#变量构造" class="headerlink" title="变量构造"></a>变量构造</h3><ul><li>可以基于整数、字符串、浮点数或元组构造 Decimal 实例。<ul><li>不要用float啦，都要高精度运算了还用低精度的数据。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> decimal<br><br>a = decimal.Decimal(<span class="hljs-number">1</span>)<br>b = decimal.Decimal(<span class="hljs-string">&#x27;3.14&#x27;</span>)<br>c = decimal.Decimal(<span class="hljs-number">3.14</span>) <span class="hljs-comment"># 注意精度问题</span><br>d = decimal.Decimal((<span class="hljs-number">0</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>), -<span class="hljs-number">2</span>)) <span class="hljs-comment">#符号位(1为负数,0为正数)，构造元组，指数位</span><br><br><span class="hljs-comment"># 下面的代码更简洁一点，导入decimal全部模块，可以不用写前面的decimal.</span><br><span class="hljs-keyword">from</span> decimal <span class="hljs-keyword">import</span> *<br>a = Decimal(<span class="hljs-number">1</span>)<br>b = Decimal(<span class="hljs-string">&#x27;3.14&#x27;</span>)<br>c = Decimal(<span class="hljs-number">3.14</span>) <span class="hljs-comment"># 注意精度问题</span><br>d = Decimal((<span class="hljs-number">0</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>), -<span class="hljs-number">2</span>)) <span class="hljs-comment">#符号位(1为负数,0为正数)，构造元组，指数位</span><br><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h2><ul><li>查看当前上下文(包括精度，舍入，指数限制，等等)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> decimal <span class="hljs-keyword">import</span> *<br>getcontext()<br></code></pre></td></tr></table></figure></li></ul><h2 id="设置小数精度"><a href="#设置小数精度" class="headerlink" title="设置小数精度"></a>设置小数精度</h2><h3 id="quantize使用"><a href="#quantize使用" class="headerlink" title="quantize使用"></a>quantize使用</h3><ul><li><code>quantize()</code>函数将数字四舍五入格式化</li><li><p>该函数接受参数为：作为格式化模板的decimal对象，与舍入方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> decimal <span class="hljs-keyword">import</span> *<br><br>fm1 = decimal.Decimal(<span class="hljs-string">&quot;0.01&quot;</span>)<br><span class="hljs-comment"># 保留两位小数，且截断舍入(舍去所有精确位数之后的数)</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>decimal.Decimal(<span class="hljs-string">&quot;2.718&quot;</span>).quantize(fm1,rounding=ROUND_DOWN)<br>Decimal(<span class="hljs-string">&#x27;2.71&#x27;</span>)<br><br><span class="hljs-comment"># 保留y一位小数，且进一舍入</span><br>fm2 = decimal.Decimal(<span class="hljs-string">&quot;0.1&quot;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>decimal.Decimal(<span class="hljs-string">&quot;2.718&quot;</span>).quantize(fm2,rounding=ROUND_UP)<br>Decimal(<span class="hljs-string">&#x27;2.8&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="全局精度"><a href="#全局精度" class="headerlink" title="全局精度"></a>全局精度</h3></li><li><p>通过<code>decimal.getcontext().prec</code>设置全局精度。</p></li><li>可以设置有效数字可以决定小数点后有效位数，在截取有效位数时，默认遵守<strong>四舍五入</strong>原则<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> decimal<br><br>decimal.getcontext().prec = <span class="hljs-number">4</span><br><span class="hljs-built_in">print</span>(decimal.Decimal(<span class="hljs-number">1</span>)/decimal.Decimal(<span class="hljs-number">6</span>)) <span class="hljs-comment">#0.1667</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>/<span class="hljs-number">6</span>) <span class="hljs-comment">#0.16666666666666666</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="局部精度"><a href="#局部精度" class="headerlink" title="局部精度"></a>局部精度</h3><ul><li>使用<code>decimal.localcontext()</code>设置局部精度，不会影响全局设置。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置局部精度为8</span><br><span class="hljs-keyword">with</span> localcontext() <span class="hljs-keyword">as</span> ctx:<br>    ctx.prec = <span class="hljs-number">8</span><br>    a = decimal.Decimal(<span class="hljs-string">&quot;3.1415926535&quot;</span>)<br>    a *= <span class="hljs-number">2</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>Decimal(<span class="hljs-string">&#x27;6.2831853&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>getcontext().prec<br><span class="hljs-number">4</span> <span class="hljs-comment"># 不影响全局精度</span><br></code></pre></td></tr></table></figure><h1 id="代码示例——精确e的后200位"><a href="#代码示例——精确e的后200位" class="headerlink" title="代码示例——精确e的后200位"></a>代码示例——精确e的后200位</h1></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 利用泰勒公式近似e</span><br><span class="hljs-keyword">from</span> decimal <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># e的初值f(0)</span><br>e = Decimal(<span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-comment"># 循环次数</span><br>k = <span class="hljs-number">1000</span><br><span class="hljs-comment"># 循环计数器</span><br>i = <span class="hljs-number">1</span><br><span class="hljs-comment"># 保存当前的阶乘结果</span><br>c = Decimal(<span class="hljs-string">&quot;1&quot;</span>)<br><br><span class="hljs-comment"># 考虑到尾部浮动误差，精度适当取大</span><br>getcontext().prec = <span class="hljs-number">202</span><br><span class="hljs-comment"># 泰勒展开！</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,k+<span class="hljs-number">1</span>):<br>    c = c / i<br>    e += c<br>    i += <span class="hljs-number">1</span><br><span class="hljs-comment"># 输出</span><br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> study </tag>
            
            <tag> python </tag>
            
            <tag> 浮点数高精实现 </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试案例5</title>
      <link href="/2024/10/13/%E6%B5%8B%E8%AF%95%E6%A1%88%E4%BE%8B5/"/>
      <url>/2024/10/13/%E6%B5%8B%E8%AF%95%E6%A1%88%E4%BE%8B5/</url>
      
        <content type="html"><![CDATA[<h2 id="hello-这是我的测试案例"><a href="#hello-这是我的测试案例" class="headerlink" title="hello 这是我的测试案例."></a>hello 这是我的测试案例.</h2>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试案例4</title>
      <link href="/2024/10/13/%E6%B5%8B%E8%AF%95%E6%A1%88%E4%BE%8B4/"/>
      <url>/2024/10/13/%E6%B5%8B%E8%AF%95%E6%A1%88%E4%BE%8B4/</url>
      
        <content type="html"><![CDATA[<h2 id="hello-这是我的测试案例"><a href="#hello-这是我的测试案例" class="headerlink" title="hello 这是我的测试案例."></a>hello 这是我的测试案例.</h2>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试案例3</title>
      <link href="/2024/10/13/%E6%B5%8B%E8%AF%95%E6%A1%88%E4%BE%8B3/"/>
      <url>/2024/10/13/%E6%B5%8B%E8%AF%95%E6%A1%88%E4%BE%8B3/</url>
      
        <content type="html"><![CDATA[<h2 id="hello-这是我的测试案例"><a href="#hello-这是我的测试案例" class="headerlink" title="hello 这是我的测试案例."></a>hello 这是我的测试案例.</h2>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试案例2</title>
      <link href="/2024/10/13/2nd/"/>
      <url>/2024/10/13/2nd/</url>
      
        <content type="html"><![CDATA[<h2 id="hello-这是我的测试案例"><a href="#hello-这是我的测试案例" class="headerlink" title="hello 这是我的测试案例."></a>hello 这是我的测试案例.</h2>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2024/10/12/hello-world/"/>
      <url>/2024/10/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>图库</title>
      <link href="/Gallery/index.html"/>
      <url>/Gallery/index.html</url>
      
        <content type="html"><![CDATA[<center>清新唯美之图，恬雅淡漠之意</center><div class="gallery-page">    <div class="gallery-list">        <div class="gallery-column">            <div class="gallery-item">                <a href="favorates"><img src="8.jpg">                </a>                <p>- 我的收藏 -</p>            </div>            <div class="gallery-item">                <a href="others"><img src="7.jpg">                </a>                <p>- 其他 -</p>            </div>        </div>    </div></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/progress_bar.css"/>
      <url>/css/progress_bar.css</url>
      
        <content type="html"><![CDATA[.pace {    -webkit-pointer-events: none;    pointer-events: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    z-index: 2000;    position: fixed;    margin: auto;    top: 10px;    left: 0;    right: 0;    height: 8px;    border-radius: 8px;    width: 4rem;    background: #eaecf2;    border: 1px #e3e8f7;    overflow: hidden;}.pace-inactive .pace-progress {    opacity: 0;    transition: 0.3s ease-in;}.pace .pace-progress {    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    -ms-box-sizing: border-box;    -o-box-sizing: border-box;    box-sizing: border-box;    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    -o-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0);    max-width: 200px;    position: absolute;    z-index: 2000;    display: block;    top: 0;    right: 100%;    height: 100%;    width: 100%;    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);    animation: gradient 1.5s ease infinite;    background-size: 200%;}.pace.pace-inactive {    opacity: 0;    transition: 0.3s;    top: -8px;}@keyframes gradient {    0% {        background-position: 0% 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0% 50%;    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/readPercent.css"/>
      <url>/css/readPercent.css</url>
      
        <content type="html"><![CDATA[/* 返回顶部 */button#go-up #percent {    display: none;    font-weight: bold;    font-size: 15px !important;}button#go-up span {    font-size: 12px !important;    margin-right: -1px;}/* 鼠标滑动到按钮上时显示返回顶部图标 */button#go-up:hover i {    display: block !important;}button#go-up:hover #percent {    display: none !important;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><hr><ul><li>本站仅用于个人使用，没有用于任何商业用途，若有侵权请及时告知修改。</li></ul><h2 id="建站初衷"><a href="#建站初衷" class="headerlink" title="建站初衷"></a>建站初衷</h2><hr><ul><li>作为计科人，避免不了上网寻求帮助解决问题的情况，此时令人耳目一新的博客界面，深入浅出的博客内容，狠狠地吸引住了我。</li><li>于是夜雨阁由此诞生。本站仅用来记录个人的成长历程，以及便于给后来人提供参考，是个win-win的choice,isn’t it?</li><li>本人在CS学科仍是初学者，正在努力学习ing,难免会有一些不足或错误，如果你发现了什么值得改进的地方，欢迎联系~</li></ul><h2 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h2><hr><ul><li>鄙人是来自上海华师的一名计科新生，乡起福建省福州市闽清县。</li><li>因为对于Computer Science 的热爱与兴趣，我毫不犹豫地选择了计算机这个专业，又因某种缘分与华师邂逅。</li><li>虽然我不否认对于大一新生的我来说，大学的学习生活与高中相比之下有很多不同。尤其是如何高效地巩固新知识,如何将时间花在更有意义的地方,如何用尽量少的时间应对校内的考试保证绩点,同时又能有效的安排娱乐与学习,都是大一目前的难题与挑战，但这也给生活带来了乐趣，不是么？</li><li>我的短期目标：计算机学科基础的学习与巩固</li></ul><h2 id="Programming-Language"><a href="#Programming-Language" class="headerlink" title="Programming Language"></a>Programming Language</h2><hr><ul><li>C/C++</li><li>Python</li><li>Java</li><li>Still learning~</li></ul><h2 id="Contact"><a href="#Contact" class="headerlink" title="Contact"></a>Contact</h2><hr><ul><li>QQ:498187073</li><li>Wechat: NRL_5212</li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/universe.css"/>
      <url>/css/universe.css</url>
      
        <content type="html"><![CDATA[/* 背景宇宙星光  */#universe {    display: block;    position: fixed;    margin: 0;    padding: 0;    border: 0;    outline: 0;    left: 0;    top: 0;    width: 100%;    height: 100%;    pointer-events: none;    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */    z-index: -1;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[:root {    --trans-light: rgba(255, 255, 255, 0.75);    --trans-dark: rgba(25, 25, 25, 0.6);    --border-style: 1px solid rgb(169, 169, 169);    /* blur(5px) saturate(150%) */    --backdrop-filter: none;}/* 页脚与头图透明 */#footer {    background: transparent !important;}#page-header {    background: transparent !important;}/* 白天模式遮罩透明 */#footer::before {    background: transparent !important;}#page-header::before {    background: transparent !important;}/* 夜间模式遮罩透明 */[data-theme="dark"] #footer::before {    background: transparent !important;}[data-theme="dark"] #page-header::before {    background: transparent !important;}/* 侧边栏个人信息卡片动态渐变色 */#aside-content>.card-widget.card-info {    background: linear-gradient(-45deg,            #e8d8b9,            #eccec5,            #a3e9eb,            #bdbdf0,            #eec1ea);    box-shadow: 0 0 5px rgb(66, 68, 68);    position: relative;    background-size: 400% 400%;    -webkit-animation: Gradient 10s ease infinite;    -moz-animation: Gradient 10s ease infinite;    animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {    0% {        background-position: 0% 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0% 50%;    }}@-moz-keyframes Gradient {    0% {        background-position: 0% 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0% 50%;    }}@keyframes Gradient {    0% {        background-position: 0% 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0% 50%;    }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content>.card-widget.card-info {    background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content>.card-widget.card-info>#card-info-btn {    background-color: #3eb8be;    border-radius: 8px;}@font-face {    /* 为载入的字体取名字(随意) */    font-family: 'NRL';    /* 字体文件地址(相对或者绝对路径都可以) */    src: url(/fonts/ChillHuoFangSong-ConBold.otf);    /* 定义加粗样式(加粗多少) */    font-weight: normal;    /* 定义字体样式(斜体/非斜体) */    font-style: normal;    /* 定义显示样式 */    font-display: block;}/* 翻页按钮居中 */#pagination {    width: 100%;    margin: auto;}/* 小冰分类分类磁铁黑夜模式适配 *//* 一般状态 */[data-theme="dark"] .magnet_link_context {    background: #1e1e1e;    color: antiquewhite;}/* 鼠标悬浮状态 */[data-theme="dark"] .magnet_link_context:hover {    background: #3ecdf1;    color: #f2f2f2;}/* 一级菜单居中 */#nav .menus_items {    position: absolute !important;    width: fit-content !important;    left: 50% !important;    transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {    display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(5) .menus_item_child {    left: -38px;}/* 夜间模式菜单栏发光字 */[data-theme="dark"] #nav .site-page,[data-theme="dark"] #nav .menus_items .menus_item .menus_item_child li a {    text-shadow: 0 0 2px var(--theme-color) !important;}/* 手机端适配 */[data-theme="dark"] #sidebar #sidebar-menus .menus_items .site-page {    text-shadow: 0 0 2px var(--theme-color) !important;}/* 闪烁变动颜色连续渐变 */#site-name,#site-title,#site-subtitle,#post-info,.author-info__name,.author-info__description {    transition: text-shadow 1s linear !important;}/* 鼠标样式 */#cursor {    position: fixed;    width: 16px;    height: 16px;    /* 这里改变跟随的底色 */    background: rgb(57, 197, 187);    border-radius: 8px;    opacity: 0.25;    z-index: 10086;    pointer-events: none;    transition: 0.2s ease-in-out;    transition-property: background, opacity, transform;}#cursor.hidden {    opacity: 0;}#cursor.hover {    opacity: 0.1;    transform: scale(2.5);    -webkit-transform: scale(2.5);    -moz-transform: scale(2.5);    -ms-transform: scale(2.5);    -o-transform: scale(2.5);}#cursor.active {    opacity: 0.5;    transform: scale(0.5);    -webkit-transform: scale(0.5);    -moz-transform: scale(0.5);    -ms-transform: scale(0.5);    -o-transform: scale(0.5);}/* 首页文章卡片 */#recent-posts>.recent-post-item {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border-radius: 25px;    border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border-radius: 18px;    border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border: var(--border-style);    border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {    background: rgba(255, 255, 255, 0.75);    backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {    background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts>.recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {    background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {    background: transparent !important;}[data-theme="dark"] #page-header::before {    background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {    background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {    background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {    background: rgba(25, 25, 25, 0.9) !important;    color: #ffffff;}[data-theme="dark"] .read-mode div#post {    background: rgba(25, 25, 25, 0.9) !important;    color: #ffffff;}/*图标大小*/svg.icon {    width: 1.28em;    height: 1.28em;    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;}/* 文章页H1-H6图标样式效果 *//* 控制风车转动速度 4s那里可以自己调节快慢 */h1::before,h2::before,h3::before,h4::before,h5::before,h6::before {    -webkit-animation: ccc 4s linear infinite;    animation: ccc 4s linear infinite;}/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */@-webkit-keyframes ccc {    0% {        -webkit-transform: rotate(0deg);        transform: rotate(0deg);    }    to {        -webkit-transform: rotate(-1turn);        transform: rotate(-1turn);    }}@keyframes ccc {    0% {        -webkit-transform: rotate(0deg);        transform: rotate(0deg);    }    to {        -webkit-transform: rotate(-1turn);        transform: rotate(-1turn);    }}/* 设置风车颜色 */#content-inner.layout h1::before {    color: #ef50a8;    margin-left: -1.55rem;    font-size: 1.3rem;    margin-top: -0.23rem;}#content-inner.layout h2::before {    color: #fb7061;    margin-left: -1.35rem;    font-size: 1.1rem;    margin-top: -0.12rem;}#content-inner.layout h3::before {    color: #ffbf00;    margin-left: -1.22rem;    font-size: 0.95rem;    margin-top: -0.09rem;}#content-inner.layout h4::before {    color: #a9e000;    margin-left: -1.05rem;    font-size: 0.8rem;    margin-top: -0.09rem;}#content-inner.layout h5::before {    color: #57c850;    margin-left: -0.9rem;    font-size: 0.7rem;    margin-top: 0rem;}#content-inner.layout h6::before {    color: #5ec1e0;    margin-left: -0.9rem;    font-size: 0.66rem;    margin-top: 0rem;}/* s设置风车hover动效 6s那里可以自己调节快慢*/#content-inner.layout h1:hover,#content-inner.layout h2:hover,#content-inner.layout h3:hover,#content-inner.layout h4:hover,#content-inner.layout h5:hover,#content-inner.layout h6:hover {    color: var(--theme-color);}#content-inner.layout h1:hover::before,#content-inner.layout h2:hover::before,#content-inner.layout h3:hover::before,#content-inner.layout h4:hover::before,#content-inner.layout h5:hover::before,#content-inner.layout h6:hover::before {    color: var(--theme-color);    -webkit-animation: ccc 6s linear infinite;    animation: ccc 6s linear infinite;}/* 滚动条样式 */::-webkit-scrollbar {    width: 8px;    height: 8px;}::-webkit-scrollbar-track {    background-color: rgba(73, 177, 245, 0.2);    border-radius: 2em;}::-webkit-scrollbar-thumb {    background-color: var(--theme-color);    background-image: -webkit-linear-gradient(45deg,            rgba(255, 255, 255, 0.4) 25%,            transparent 25%,            transparent 50%,            rgba(255, 255, 255, 0.4) 50%,            rgba(255, 255, 255, 0.4) 75%,            transparent 75%,            transparent);    border-radius: 2em;}::-webkit-scrollbar-corner {    background-color: transparent;}::-moz-selection {    color: #fff;    background-color: var(--theme-color);}/* 波浪css */.main-hero-waves-area {    width: 100%;    position: absolute;    left: 0;    bottom: -11px;    z-index: 5;}.waves-area .waves-svg {    width: 100%;    height: 5rem;}/* Animation */.parallax>use {    animation: move-forever 25s cubic-bezier(0.55, 0.5, 0.45, 0.5) infinite;}.parallax>use:nth-child(1) {    animation-delay: -2s;    animation-duration: 7s;    fill: #f7f9febd;}.parallax>use:nth-child(2) {    animation-delay: -3s;    animation-duration: 10s;    fill: #f7f9fe82;}.parallax>use:nth-child(3) {    animation-delay: -4s;    animation-duration: 13s;    fill: #f7f9fe36;}.parallax>use:nth-child(4) {    animation-delay: -5s;    animation-duration: 20s;    fill: #f7f9fe;}/* 黑色模式背景 */[data-theme="dark"] .parallax>use:nth-child(1) {    animation-delay: -2s;    animation-duration: 7s;    fill: #18171dc8;}[data-theme="dark"] .parallax>use:nth-child(2) {    animation-delay: -3s;    animation-duration: 10s;    fill: #18171d80;}[data-theme="dark"] .parallax>use:nth-child(3) {    animation-delay: -4s;    animation-duration: 13s;    fill: #18171d3e;}[data-theme="dark"] .parallax>use:nth-child(4) {    animation-delay: -5s;    animation-duration: 20s;    fill: #18171d;}@keyframes move-forever {    0% {        transform: translate3d(-90px, 0, 0);    }    100% {        transform: translate3d(85px, 0, 0);    }}/*Shrinking for mobile*/@media (max-width: 768px) {    .waves-area .waves-svg {        height: 40px;        min-height: 40px;    }}/* 头像呼吸灯 */[data-theme="light"] .avatar-img {    animation: huxi_light 4s ease-in-out infinite;}[data-theme="dark"] .avatar-img {    animation: huxi_dark 4s ease-in-out infinite;}@keyframes huxi_light {    0% {        box-shadow: 0px 0px 1px 1px #e9f5fa;    }    50% {        box-shadow: 0px 0px 5px 5px #e9f5fa;    }    100% {        box-shadow: 0px 0px 1px 1px #e9f5fa;    }}@keyframes huxi_dark {    0% {        box-shadow: 0px 0px 1px 1px #39c5bb;    }    50% {        box-shadow: 0px 0px 5px 5px #39c5bb;    }    100% {        box-shadow: 0px 0px 1px 1px #39c5bb;    }}/*信息卡片头像状态*/.card-info-avatar .author-status-box {    position: absolute;    bottom: 0;    left: calc(100% - 28px);    width: 28px;    height: 28px;    border: 1px solid #d0d7de;    border-radius: 2em;    background-color: #f8f8f8f8;    transition: 0.4s;    overflow: hidden;}[data-theme="dark"] .card-info-avatar .author-status-box {    background-color: #222222f2;    border: 1px solid #5c6060;}.card-info-avatar .author-status-box .author-status {    display: flex;    align-items: center;    justify-content: center;    height: 28px;    padding: 0 5px;}.card-info-avatar .author-status-box:hover {    width: 105px;}.card-info-avatar .author-status-box:hover .author-status span {    width: 105px;    margin-left: 4px;}.card-info-avatar .author-status-box .author-status span {    width: 0;    font-size: 12px;    height: 100%;    overflow: hidden;    text-overflow: ellipsis;    white-space: nowrap;    transition: 0.4s;}.card-widget .card-info-avatar {    display: inline-block;    position: relative;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>charts</title>
      <link href="/charts/index.html"/>
      <url>/charts/index.html</url>
      
        <content type="html"><![CDATA[<!-- 文章发布时间统计图 --><div id="posts-chart" data-start="2021-01" style="border-radius: 8px; height: 300px; padding: 10px;"></div><!-- 文章标签统计图 --><div id="tags-chart" data-length="10" style="border-radius: 8px; height: 300px; padding: 10px;"></div><!-- 文章分类统计图 --><div id="categories-chart" data-parent="true" style="border-radius: 8px; height: 300px; padding: 10px;"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cursor.js"/>
      <url>/js/cursor.js</url>
      
        <content type="html"><![CDATA[var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {    try {        return window.getComputedStyle            ? window.getComputedStyle(el)[attr]            : el.currentStyle[attr];    } catch (e) { }    return "";};class Cursor {    constructor() {        this.pos = { curr: null, prev: null };        this.pt = [];        this.create();        this.init();        this.render();    }    move(left, top) {        this.cursor.style["left"] = `${left}px`;        this.cursor.style["top"] = `${top}px`;    }    create() {        if (!this.cursor) {            this.cursor = document.createElement("div");            this.cursor.id = "cursor";            this.cursor.classList.add("hidden");            document.body.append(this.cursor);        }        var el = document.getElementsByTagName('*');        for (let i = 0; i < el.length; i++)            if (getStyle(el[i], "cursor") == "pointer")                this.pt.push(el[i].outerHTML);        document.body.appendChild((this.scr = document.createElement("style")));        // 这里改变鼠标指针的颜色 由svg生成        this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='1.0' fill='rgb(57, 197, 187)'/></svg>") 4 4, auto}`;    }    refresh() {        this.scr.remove();        this.cursor.classList.remove("hover");        this.cursor.classList.remove("active");        this.pos = { curr: null, prev: null };        this.pt = [];        this.create();        this.init();        this.render();    }    init() {        document.onmouseover = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");        document.onmouseout = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");        document.onmousemove = e => { (this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = { x: e.clientX - 8, y: e.clientY - 8 }; this.cursor.classList.remove("hidden"); };        document.onmouseenter = e => this.cursor.classList.remove("hidden");        document.onmouseleave = e => this.cursor.classList.add("hidden");        document.onmousedown = e => this.cursor.classList.add("active");        document.onmouseup = e => this.cursor.classList.remove("active");    }    render() {        if (this.pos.prev) {            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);            this.move(this.pos.prev.x, this.pos.prev.y);        } else {            this.pos.prev = this.pos.curr;        }        requestAnimationFrame(() => this.render());    }}(() => {    CURSOR = new Cursor();    // 需要重新获取列表时，使用 CURSOR.refresh()})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/custom.js"/>
      <url>/js/custom.js</url>
      
        <content type="html"><![CDATA[function switchPostChart() {    // 这里为了统一颜色选取的是“明暗模式”下的两种字体颜色，也可以自己定义    let color = document.documentElement.getAttribute('data-theme') === 'light' ? '#4C4948' : 'rgba(255,255,255,0.7)'    if (document.getElementById('posts-chart') && postsOption) {        try {            let postsOptionNew = postsOption            postsOptionNew.title.textStyle.color = color            postsOptionNew.xAxis.nameTextStyle.color = color            postsOptionNew.yAxis.nameTextStyle.color = color            postsOptionNew.xAxis.axisLabel.color = color            postsOptionNew.yAxis.axisLabel.color = color            postsOptionNew.xAxis.axisLine.lineStyle.color = color            postsOptionNew.yAxis.axisLine.lineStyle.color = color            postsOptionNew.series[0].markLine.data[0].label.color = color            postsChart.setOption(postsOptionNew)        } catch (error) {            console.log(error)        }    }    if (document.getElementById('tags-chart') && tagsOption) {        try {            let tagsOptionNew = tagsOption            tagsOptionNew.title.textStyle.color = color            tagsOptionNew.xAxis.nameTextStyle.color = color            tagsOptionNew.yAxis.nameTextStyle.color = color            tagsOptionNew.xAxis.axisLabel.color = color            tagsOptionNew.yAxis.axisLabel.color = color            tagsOptionNew.xAxis.axisLine.lineStyle.color = color            tagsOptionNew.yAxis.axisLine.lineStyle.color = color            tagsOptionNew.series[0].markLine.data[0].label.color = color            tagsChart.setOption(tagsOptionNew)        } catch (error) {            console.log(error)        }    }    if (document.getElementById('categories-chart') && categoriesOption) {        try {            let categoriesOptionNew = categoriesOption            categoriesOptionNew.title.textStyle.color = color            categoriesOptionNew.legend.textStyle.color = color            if (!categoryParentFlag) { categoriesOptionNew.series[0].label.color = color }            categoriesChart.setOption(categoriesOptionNew)        } catch (error) {            console.log(error)        }    }}document.getElementById("mode-button").addEventListener("click", function () { setTimeout(switchPostChart, 100) })]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/light.js"/>
      <url>/js/light.js</url>
      
        <content type="html"><![CDATA[// 霓虹灯效果// 颜色数组var arr = ["#39c5bb", "#f14747", "#f1a247", "#f1ee47", "#b347f1", "#1edbff", "#ed709b", "#5636ed"];// 颜色索引var idx = 0;// 切换颜色function changeColor() {    // 仅夜间模式才启用    if (document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark') {        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = arr[idx] + " 0 0 10px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = arr[idx] + " 0 0 5px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = arr[idx] + " 0 0 12px";            document.getElementsByClassName("author-info__description")[0].style.textShadow = arr[idx] + " 0 0 12px";        } catch {        }        idx++;        if (idx == 8) {            idx = 0;        }    } else {        // 白天模式恢复默认        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = "#1e1e1ee0 1px 1px 1px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = "";            document.getElementsByClassName("author-info__description")[0].style.textShadow = "";        } catch {        }    }}// 开启计时器window.onload = setInterval(changeColor, 1200);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/readPercent.js"/>
      <url>/js/readPercent.js</url>
      
        <content type="html"><![CDATA[window.onscroll = percent;// 执行函数// 页面百分比function percent() {    let a = document.documentElement.scrollTop || window.pageYOffset, // 卷去高度        b = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight) - document.documentElement.clientHeight, // 整个网页高度        result = Math.round(a / b * 100), // 计算百分比        up = document.querySelector("#go-up") // 获取按钮    if (result <= 95) {        up.childNodes[0].style.display = 'none'        up.childNodes[1].style.display = 'block'        up.childNodes[1].innerHTML = result;    } else {        up.childNodes[1].style.display = 'none'        up.childNodes[0].style.display = 'block'    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date; function createtime() { now.setTime(now.getTime() + 1e3); var e = new Date("12/10/2024 00:00:00"), t = Math.trunc(234e8 + (now - e) / 1e3 * 17), a = (t / 1496e5).toFixed(6), o = new Date("12/10/2024 00:00:00"), n = (now - o) / 1e3 / 60 / 60 / 24, r = Math.floor(n), i = (now - o) / 1e3 / 60 / 60 - 24 * r, s = Math.floor(i); 1 == String(s).length && (s = "0" + s); var d = (now - o) / 1e3 / 60 - 1440 * r - 60 * s, l = Math.floor(d); 1 == String(l).length && (l = "0" + l); var g = (now - o) / 1e3 - 86400 * r - 3600 * s - 60 * l, b = Math.round(g); 1 == String(b).length && (b = "0" + b); let c = ""; c = s < 18 && s >= 9 ? `<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-科研摸鱼中.svg' title='始终期待着能与夜月开茶话会的一天~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>` : `<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-下班休息啦.svg' title='闲着就要开开心心的摸鱼~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>`, document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = c) } setInterval((() => { createtime() }), 1e3);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() { window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame; var n, e, i, h, t = .05, s = document.getElementById("universe"), o = !0, a = "180,184,240", r = "226,225,142", d = "226,225,224", c = []; function f() { n = window.innerWidth, e = window.innerHeight, i = .216 * n, s.setAttribute("width", n), s.setAttribute("height", e) } function u() { h.clearRect(0, 0, n, e); for (var t = c.length, i = 0; i < t; i++) { var s = c[i]; s.move(), s.fadeIn(), s.fadeOut(), s.draw() } } function y() { this.reset = function () { this.giant = m(3), this.comet = !this.giant && !o && m(10), this.x = l(0, n - 10), this.y = l(0, e), this.r = l(1.1, 2.6), this.dx = l(t, 6 * t) + (this.comet + 1 - 1) * t * l(50, 120) + 2 * t, this.dy = -l(t, 6 * t) - (this.comet + 1 - 1) * t * l(50, 120), this.fadingOut = null, this.fadingIn = !0, this.opacity = 0, this.opacityTresh = l(.2, 1 - .4 * (this.comet + 1 - 1)), this.do = l(5e-4, .002) + .001 * (this.comet + 1 - 1) }, this.fadeIn = function () { this.fadingIn && (this.fadingIn = !(this.opacity > this.opacityTresh), this.opacity += this.do) }, this.fadeOut = function () { this.fadingOut && (this.fadingOut = !(this.opacity < 0), this.opacity -= this.do / 2, (this.x > n || this.y < 0) && (this.fadingOut = !1, this.reset())) }, this.draw = function () { if (h.beginPath(), this.giant) h.fillStyle = "rgba(" + a + "," + this.opacity + ")", h.arc(this.x, this.y, 2, 0, 2 * Math.PI, !1); else if (this.comet) { h.fillStyle = "rgba(" + d + "," + this.opacity + ")", h.arc(this.x, this.y, 1.5, 0, 2 * Math.PI, !1); for (var t = 0; t < 30; t++)h.fillStyle = "rgba(" + d + "," + (this.opacity - this.opacity / 20 * t) + ")", h.rect(this.x - this.dx / 4 * t, this.y - this.dy / 4 * t - 2, 2, 2), h.fill() } else h.fillStyle = "rgba(" + r + "," + this.opacity + ")", h.rect(this.x, this.y, this.r, this.r); h.closePath(), h.fill() }, this.move = function () { this.x += this.dx, this.y += this.dy, !1 === this.fadingOut && this.reset(), (this.x > n - n / 4 || this.y < 0) && (this.fadingOut = !0) }, setTimeout(function () { o = !1 }, 50) } function m(t) { return Math.floor(1e3 * Math.random()) + 1 < 10 * t } function l(t, i) { return Math.random() * (i - t) + t } f(), window.addEventListener("resize", f, !1), function () { h = s.getContext("2d"); for (var t = 0; t < i; t++)c[t] = new y, c[t].reset(); u() }(), function t() { document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark' && u(), window.requestAnimationFrame(t) }() };dark()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
